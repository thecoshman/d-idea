name: Check for newer InteliJ version

on:
  workflow_dispatch

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.version_finder.outputs.latest_version }}
      current_version: ${{ steps.version_loader.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get install -y curl
          sudo apt-get install -y wget
          sudo apt-get install -y xmlstarlet
      - name: Find latest InteliJ version
        id: version_finder
        run: |
          curl --silent 'https://www.jetbrains.com/updates/updates.xml' > jetbrainsUpdates.xml
          xmlstarlet sel -t -v '//product[@name="IntelliJ IDEA"]/channel[@name="IntelliJ IDEA RELEASE"]/build/@version' jetbrainsUpdates.xml > IDEAVersions
          LATEST_VERSION=$(build_scripts/latest_version IDEAVersions)
          echo "Latest InteliJ version is ${LATEST_VERSION}"
          echo "latest_version=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
      - name: Load current InteliJ version
        id: version_loader
        run: |
          CURRENT_VERSION='0.0.0'
          if [[ -f IDEAVersion ]]; then
            CURRENT_VERSION=$(cat IDEAVersion)
          fi
          echo "Current InteliJ version ${CURRENT_VERSION}"
          echo "current_version=${CURRENT_VERSION}" >> "$GITHUB_OUTPUT"
  confirm-versions:
    runs-on: ubuntu-latest
    needs: get-versions
    steps:
      - name: Echo versions
        env:
          LATEST_VERSION: ${{ needs.get-versions.outputs.latest_version }}
          CURRENT_VERSION: ${{ needs.get-versions.outputs.current_version }}
        run: |
          echo "Latest: ${LATEST_VERSION}, Current: ${CURRENT_VERSION}"
  # TODO Job that pulls latest image and checks if there are package updates 
  commit-new-idea-version:
    if: ${{ needs.get-versions.outputs.latest_version != needs.get-versions.outputs.current_version }}
    needs: get-versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Commit updated InteliJ version number
        env:
          LATEST_VERSION: ${{ needs.get-versions.outputs.latest_version }}
          COMMIT_EMAIL: ${{ secrets.GIT_COMMIT_EMAIL }}
        run: |
          echo "${LATEST_VERSION}" > IDEAVersion
          git config user.name github-actions
          git config user.email "${COMMIT_EMAIL}"
          git add IDEAVersion
          git commit -m "Update to InteliJ version ${LATEST_VERSION}"
          git push
  check-package-upgrades:
    runs-on: ubuntu-latest
    outputs:
      package_upgrade_count: ${{ steps.upgrade_test.outputs.upgradeable }}
    steps:
      - name: Login to Dockerhub
        env:
          USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Test latest container for package upgrades
        id: upgrade_test
        env:
          USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          SIMULATED_UPGRADE_RESULTS=$(docker run -it --rm ${{ secrets.DOCKERHUB_USERNAME }}/d-idea:latest sh -c 'apk update && apk -U upgrade --simulate')
          UPGRADEABLE_PACKAGES=$(echo ${SIMULATED_UPGRADE_RESULTS} | grep --only-matching 'Upgrading' | wc -l)
          if [[ "${UPGRADEABLE_PACKAGES}" -eq 0 ]]; then
            echo '[INFO] No packages detected as upgradable'
          else
            echo "[INFO] Detected ${UPGRADEABLE_PACKAGES} packages that can be upgraded"
          fi
          echo "upgradeable=${UPGRADEABLE_PACKAGES}" >> "$GITHUB_OUTPUT"
  trigger-image-build:
    if: ${{ needs.get-versions.outputs.latest_version != needs.get-versions.outputs.current_version  || needs.check-package-upgrades.package_upgrade_count > 0 }}
    needs: [get-versions, check-package-upgrades]
    runs-on: ubuntu-latest
    steps:
      - name: test
        run: |
          echo 'Should now call build image workflow'
